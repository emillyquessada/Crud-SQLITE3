import streamlit as st
import sqlite3
import pandas as pd # Importa√ß√£o da biblioteca pandas

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(
    page_title="Biblioteca Virtual",
    page_icon="üìö",
    layout="centered"
)

# --- Conex√£o com banco de dados ---
try:
    conexao = sqlite3.connect("biblioteca.db", check_same_thread=False)
    cursor = conexao.cursor()

    # Cria a tabela se n√£o existir
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS livros (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            titulo TEXT,
            autor TEXT,
            ano INTEGER,
            dispon√≠vel TEXT
        )
    """)
    conexao.commit()

except sqlite3.Error as e:
    st.error(f"Erro ao conectar ao banco de dados: {e}")

# --- Fun√ß√µes do banco de dados ---
def cadastrar_livro(titulo, autor, ano):
    cursor.execute("""
        INSERT INTO livros (titulo, autor, ano, dispon√≠vel)
        VALUES (?, ?, ?, ?)
    """, (titulo, autor, ano, "sim"))
    conexao.commit()

def listar_livros():
    cursor.execute("SELECT * FROM livros")
    return cursor.fetchall()

def atualizar_livro(id_livro, disponibilidade):
    cursor.execute("UPDATE livros SET dispon√≠vel = ? WHERE id = ?", (disponibilidade.lower(), id_livro))
    conexao.commit()

def remover_livro(id_livro):
    cursor.execute("DELETE FROM livros WHERE id = ?", (id_livro,))
    conexao.commit()

# --- T√≠tulo e Descri√ß√£o Principal ---
st.title("üìö Biblioteca Virtual")
st.markdown("Gerencie sua cole√ß√£o de livros de forma simples e organizada.")
st.markdown("---")

# --- Abas do menu ---
abas = st.tabs(["‚ûï Cadastrar Livro", "üìÑ Listar Livros", "üîÑ Atualizar Disponibilidade", "‚ùå Remover Livro"])

# --- Aba: Cadastrar Livro ---
with abas[0]:
    st.header("‚ûï Cadastro de Novo Livro")
    st.info("Preencha os campos abaixo para adicionar um novo livro √† biblioteca.")
    with st.form("form_cadastro"):
        titulo = st.text_input("T√≠tulo do Livro", placeholder="Ex: O Senhor dos An√©is")
        autor = st.text_input("Autor", placeholder="Ex: J.R.R. Tolkien")
        ano = st.number_input("Ano de Lan√ßamento", min_value=0, step=1, placeholder="Ex: 1954")
        cadastrar = st.form_submit_button("Cadastrar Livro")

        if cadastrar:
            if titulo and autor and ano:
                cadastrar_livro(titulo, autor, ano)
                st.success("‚úÖ Livro cadastrado com sucesso!")
            else:
                st.warning("‚ö†Ô∏è Preencha todos os campos para cadastrar o livro.")

# --- Aba: Listar Livros ---
with abas[1]:
    st.header("üìÑ Livros Cadastrados")
    livros = listar_livros()

    if livros:
        st.subheader(f"üìñ Total de livros: {len(livros)}")
        
        # Uso de colunas para exibir m√©tricas
        col1, col2 = st.columns(2)
        total_disponiveis = sum(1 for livro in livros if livro[4].lower() == 'sim')
        total_indisponiveis = len(livros) - total_disponiveis
        col1.metric("Dispon√≠veis", total_disponiveis)
        col2.metric("Indispon√≠veis", total_indisponiveis)

        st.markdown("---")

        # Cria√ß√£o do DataFrame e exibi√ß√£o da tabela
        df = pd.DataFrame(livros, columns=["ID", "T√≠tulo", "Autor", "Ano", "Dispon√≠vel"])
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.info("üì≠ Nenhum livro cadastrado ainda. Use a aba 'Cadastrar Livro' para come√ßar.")

# --- Aba: Atualizar Disponibilidade ---
with abas[2]:
    st.header("üîÑ Atualizar Disponibilidade")
    livros = listar_livros()
    if livros:
        opcoes = {f"ID {livro[0]} - {livro[1]}": livro[0] for livro in livros}
        escolha = st.selectbox("Selecione o livro que deseja atualizar:", list(opcoes.keys()))
        
        livro_selecionado = next((livro for livro in livros if livro[0] == opcoes[escolha]), None)
        disponibilidade_atual = livro_selecionado[4].lower() if livro_selecionado else "sim"

        nova_disponibilidade = st.radio(
            "Defina a nova disponibilidade:",
            ["sim", "n√£o"],
            index=0 if disponibilidade_atual == "sim" else 1
        )

        if st.button("Atualizar"):
            atualizar_livro(opcoes[escolha], nova_disponibilidade)
            st.success("üîÑ Disponibilidade atualizada com sucesso!")
    else:
        st.warning("‚ö†Ô∏è N√£o h√° livros cadastrados para atualizar a disponibilidade.")

# --- Aba: Remover Livro ---
with abas[3]:
    st.header("‚ùå Remover Livro")
    livros = listar_livros()
    if livros:
        opcoes = {f"ID {livro[0]} - {livro[1]}": livro[0] for livro in livros}
        escolha = st.selectbox("Selecione o livro para remover:", list(opcoes.keys()))

        if st.button("Remover"):
            remover_livro(opcoes[escolha])
            st.success("üóëÔ∏è Livro removido com sucesso!")
            st.rerun() # Adiciona um "rerun" para atualizar a lista ap√≥s a remo√ß√£o
    else:
        st.warning("‚ö†Ô∏è N√£o h√° livros cadastrados para remover.")
